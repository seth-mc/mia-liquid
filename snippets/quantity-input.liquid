{% comment %}
  Quantity input

  Accepts:
  - variant: {Object} Variant object
  - variant_id: {String} Variant ID (optional)
  - min: {Number} Min (optional)

  Usage:
  {% render 'quantity-input' variant: variant %}
{% endcomment %}

<quantity-input class="quantity cart-quantity flex items-center">
  <button 
    class="quantity__button border border-standard-blue rounded-l px-2 py-1 text-standard-blue hover:bg-standard-blue hover:text-white transition-colors duration-300" 
    name="minus" 
    type="button"
  >
    <span class="visually-hidden">
      {{- 'products.product.quantity.decrease' | t: product: variant.title | escape -}}
    </span>
    {% render 'icon-minus' %}
  </button>
  <input
    class="quantity__input w-12 text-center border-t border-b border-standard-blue py-1 font-auxmono text-standard-blue"
    data-quantity-variant-id="{{ variant.id }}"
    type="number"
    name="updates[{{ variant_id }}]"
    value="{{ cart | item_count_for_variant: variant.id }}"
    data-cart-quantity="{{ cart | item_count_for_variant: variant.id }}"
    min="{{ min | default: 1 }}"
    data-min="{{ variant.quantity_rule.min | default: 1 }}"
    {% if variant.quantity_rule.max != null %}
      max="{{ variant.quantity_rule.max }}"
    {% endif %}
    step="{{ variant.quantity_rule.increment | default: 1 }}"
    aria-label="{{ 'products.product.quantity.input_label' | t: product: variant.title | escape }}"
    id="Quantity-{{ variant.id }}"
    data-index="{{ variant.id }}"
  >
  <button 
    class="quantity__button border border-standard-blue rounded-r px-2 py-1 text-standard-blue hover:bg-standard-blue hover:text-white transition-colors duration-300" 
    name="plus" 
    type="button"
  >
    <span class="visually-hidden">
      {{- 'products.product.quantity.increase' | t: product: variant.title | escape -}}
    </span>
    {% render 'icon-plus' %}
  </button>
</quantity-input>

<script>
  document.addEventListener('DOMContentLoaded', (event) => {
    const quantityInputs = document.querySelectorAll('quantity-input');
    quantityInputs.forEach(container => {
      const input = container.querySelector('input[type="number"]');
      const minusButton = container.querySelector('button[name="minus"]');
      const plusButton = container.querySelector('button[name="plus"]');
      const min = parseInt(input.getAttribute('min')) || 1;
      const max = parseInt(input.getAttribute('max')) || Infinity;
      const step = parseInt(input.getAttribute('step')) || 1;

      minusButton.addEventListener('click', () => {
        const currentValue = parseInt(input.value);
        if (currentValue > min) {
          input.value = currentValue - step;
          input.dispatchEvent(new Event('change'));
        }
      });

      plusButton.addEventListener('click', () => {
        const currentValue = parseInt(input.value);
        if (currentValue < max) {
          input.value = currentValue + step;
          input.dispatchEvent(new Event('change'));
        }
      });

      input.addEventListener('change', () => {
        let value = parseInt(input.value);
        if (isNaN(value) || value < min) {
          value = min;
        } else if (value > max) {
          value = max;
        } else {
          // Round to the nearest step
          value = Math.round((value - min) / step) * step + min;
        }
        input.value = value;
      });
    });
  });
</script>